{
	"$schema": "http://json-schema.org/draft-07/schema",
	"$id": "bunup",
	"description": "Configuration for the bunup build tool",
	"anyOf": [
		{
			"type": "object",
			"properties": {
				"bunup": {
					"type": ["object", "array"],
					"oneOf": [
						{
							"type": "object",
							"$ref": "#/definitions/Options"
						},
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/Options"
							}
						}
					]
				}
			},
			"additionalProperties": true
		},
		{
			"type": ["object", "array"],
			"oneOf": [
				{
					"type": "object",
					"$ref": "#/definitions/Options"
				},
				{
					"type": "array",
					"items": {
						"$ref": "#/definitions/Options"
					}
				}
			]
		}
	],
	"definitions": {
		"Options": {
			"type": "object",
			"markdownDescription": "Configuration options for [bunup](https://bunup.dev)",
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of the build configuration. Used for logging and identification purposes."
				},
				"entry": {
					"description": "Entry point files for the build. This can be a string path to a file, an array of file paths, or an object where keys are output names and values are input file paths.",
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						{
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					]
				},
				"outDir": {
					"type": "string",
					"description": "Output directory for the bundled files. Defaults to 'dist' if not specified."
				},
				"format": {
					"type": "array",
					"items": {
						"type": "string",
						"enum": ["esm", "cjs", "iife"]
					},
					"description": "Output formats for the bundle. Can include 'esm', 'cjs', and/or 'iife'. Defaults to ['esm'] if not specified."
				},
				"minify": {
					"type": "boolean",
					"description": "Whether to enable all minification options. When true, enables minifyWhitespace, minifyIdentifiers, and minifySyntax."
				},
				"splitting": {
					"type": "boolean",
					"description": "Whether to enable code splitting. Defaults to true for ESM format, false for CJS format."
				},
				"minifyWhitespace": {
					"type": "boolean",
					"description": "Whether to minify whitespace in the output. Removes unnecessary whitespace to reduce file size."
				},
				"minifyIdentifiers": {
					"type": "boolean",
					"description": "Whether to minify identifiers in the output. Renames variables and functions to shorter names."
				},
				"minifySyntax": {
					"type": "boolean",
					"description": "Whether to minify syntax in the output. Optimizes code structure for smaller file size."
				},
				"watch": {
					"type": "boolean",
					"description": "Whether to watch for file changes and rebuild automatically."
				},
				"dts": {
					"description": "Whether to generate TypeScript declaration files (.d.ts). When set to true, generates declaration files for all entry points. Can also be configured with options for more control.",
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "object",
							"properties": {
								"entry": {
									"description": "Entry point files for TypeScript declaration file generation.",
									"oneOf": [
										{
											"type": "string"
										},
										{
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										{
											"type": "object",
											"additionalProperties": {
												"type": "string"
											}
										}
									]
								},
								"resolve": {
									"description": "Resolve external types used in dts files from node_modules.",
									"oneOf": [
										{
											"type": "boolean"
										},
										{
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									]
								},
								"splitting": {
									"type": "boolean",
									"description": "Whether to enable code splitting for declaration files."
								},
								"minify": {
									"type": "boolean",
									"description": "Whether to minify declaration files."
								}
							},
							"additionalProperties": false
						}
					]
				},
				"preferredTsconfig": {
					"type": "string",
					"description": "Path to a custom tsconfig.json file to use for both TypeScript declaration generation and build path resolution. If not specified, the nearest tsconfig.json will be used."
				},
				"external": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "External packages that should not be bundled. Useful for dependencies that should be kept as external imports. Note: In JavaScript code, these can be either strings or RegExp objects."
				},
				"noExternal": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Packages that should be bundled even if they are in external. Useful for dependencies that should be included in the bundle. Note: In JavaScript code, these can be either strings or RegExp objects."
				},
				"target": {
					"type": "string",
					"enum": ["browser", "bun", "node"],
					"description": "The target environment for the bundle. Defaults to 'node' if not specified."
				},
				"clean": {
					"type": "boolean",
					"description": "Whether to clean the output directory before building. When true, removes all files in the outDir before starting a new build. Defaults to true if not specified."
				},
				"sourcemap": {
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"type": "string",
							"enum": ["none", "linked", "external", "inline"]
						}
					],
					"description": "Specifies the type of sourcemap to generate. Can be 'none', 'linked', 'external', or 'inline'. Can also be a boolean - when true, it will use 'inline'."
				},
				"define": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					},
					"description": "Define global constants for the build. These values will be replaced at build time."
				},
				"banner": {
					"type": "string",
					"description": "A banner to be added to the final bundle, this can be a directive like \"use client\" for react or a comment block such as a license for the code."
				},
				"footer": {
					"type": "string",
					"description": "A footer to be added to the final bundle, this can be something like a comment block for a license or just a fun easter egg."
				},
				"drop": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Remove function calls from a bundle. For example, `drop: [\"console\"]` will remove all calls to `console.log`. Arguments to calls will also be removed, regardless of if those arguments may have side effects. Dropping `debugger` will remove all `debugger` statements."
				},
				"loader": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					},
					"description": "A map of file extensions to built-in loader names. This can be used to quickly customize how certain files are loaded."
				},
				"silent": {
					"type": "boolean",
					"description": "Disable logging during the build process. When set to true, no logs will be printed to the console."
				},
				"publicPath": {
					"type": "string",
					"description": "You can specify a prefix to be added to specific import paths in your bundled code. Used for assets, external modules, and chunk files when splitting is enabled."
				},
				"env": {
					"oneOf": [
						{
							"type": "string",
							"description": "Can be 'inline', 'disable', or a string ending in '*' to define which environment variables are injected at build time."
						},
						{
							"type": "object",
							"additionalProperties": {
								"type": "string"
							},
							"description": "An object of key-value pairs that will replace both process.env.KEY and import.meta.env.KEY references."
						}
					],
					"description": "Controls how environment variables are handled during bundling."
				},
				"ignoreDCEAnnotations": {
					"type": "boolean",
					"description": "Ignore dead code elimination/tree-shaking annotations such as @__PURE__ and package.json \"sideEffects\" fields. This should only be used as a temporary workaround for incorrect annotations in libraries."
				},
				"emitDCEAnnotations": {
					"type": "boolean",
					"description": "Force emitting @__PURE__ annotations even if minify.whitespace is true."
				},
				"onSuccess": {
					"type": "string",
					"description": "Command to execute after a successful build. This is executed each time a build completes successfully, including in watch mode."
				}
			},
			"required": ["entry"],
			"additionalProperties": false
		}
	}
}
